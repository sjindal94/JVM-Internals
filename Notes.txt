Course: https://www.udemy.com/course/java-application-performance-and-memory-management/

JVM
* JVM itself is written in C and C++.
Flags info: https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html
Tunings learnt:
StringTableSize
CodeCacheExpansionSize
InitialCodeCacheSize
ReservedCodeCacheSize
Interning a string


** Chapter2
* has just in time compilation. Converts bytecode to native code for most frequenntly used bits of code, for efficiency.

* -XX:+PrintCompilation
 72         25                  %                        4       PrimeNumbers::isPrime @ 2 (35 bytes)
seq no.  compilation_order.   placed in code 
                             cache(highest possible   
                               efficiency).   


0-4 numbers are compilation depth, then the piece of code. 0 means none(so interpreted).

* C1 and C2 compilers.  
C1 has 3 levels of native compilation. C2 has the 4th level.
Based of profiling output, JVM decides the level of compilation. It can even put that piece in special place called code cahce for efficieny.

* -XX:+UnlockDiagnosticVMOptions option that unlocks diagnostic JVM options. 

* -XX:+LogCimpilation Enables logging of compilation activity to a file named hotspot.log in the current working directory. You can specify a different log file path and name using the -XX:LogFile option.



* Tuning: Code Cache size
Moving code in and out of code cahce can happen

-XX:+PrintCodeCache - to see cahce size available and used. Max is 32Mb/64Mb.

To change
XX:InitialCodeCacheSize (Initial code cache size (in bytes))
XX:ReservedCodeCacheSize (Reserved code cache size (in bytes) - maximum code cache size)
XX:CodeCacheExpansionSize (Code cache expansion size (in bytes))



* Use JConsole to monitor the code cache size, uses extra ~2Mb of codecahce for JConsole compilation by JVM.

**Chapter 4 Memory management

* Stacks - Each Java thread has it's own stack and push and pops data as it enters/exits blocks of code. Stack only stores primitive data types. ints/doubles. All data in our application is accessed via the stack, either fully within or by a reference.
* Heaps - For storing big complex objects, also shared across all Java threads for passing around objects. String / Integer/ Customer. The pointer to that object is stored on the stack.




**Chapter 5 Passing objects
* Java always pass variable by value and not by reference. So a new copy is always made. For primitives it's the actual data, for objects, it's the reference variable.
* final variable cannot change, final method cannot be overridden, final class cannot be subclassed. Final gives JVM, do inlining for optimization. final variables can be initialized separately but cannot be changed. 
but,
final c= new customer("Susan") will error
c.setName("Susan") will not. as only the reference is fixed by final.
* Const correctness was never implemented in Java.
* stringvariable.toLowerCase() creates a new string, which is immediately ready for garbage collection if there is no assignment.


**Chapter 7 Escaping Reference
Giving access to objects with only getters of local variables to clients.
Caller can delete or mangle with the object.
Strategy 1) Making the class iterable. Still client can do it.remove() or it.clear().
Strategy 2) returning new Object() when doing getObject(). But now it causes confusion. Time and memory will be impacted whenever there is a get, but it is still not a big performance issue.
Strategy 3) returning immutable collection by doing Collections.unmodifiableMap(records) (<java10) or Map.copyof(records) (>java10). If records was already immutable, <java10 would always create a new object, but >java10 just returns the same object. (Slight performance improvements).
Strategy 4) For non collections object, this can heppen, records.find("John").setName("Jane").
To avoid that, we create a copyconstructor to Customer Class and then return by return new Customer(records.get(name)).
Strategy 5) Use Interfaces to provide only a ready only copy of the object. Malicious client can cast it back to original Customer class, but it still doesn't change the original data.
Strategy 6) Using modules from JPMS - Java Platform Module System (>java9).



**Chapter 9 Metaspace and internal JVM memory management.
* Stores metadata around class names, like which methods are to be interpreted or compiled etc.
* static primitives and reference to static object(stored in heap) are stored in Metaspace.
* Unlike stack, variables on metaspace are always there and never garbage collected.
* Before metaspace, <=java7, PermGen was there, and there were issues with it like OutOfMemoryError:PermGen. So it is now replaced.
* Modern JVMs can put an object on stack itself if it knows that it is not going to be used outside the block.
* String optimizations: 
 String one = "one";
 String two = "two";
JVM will use the same heap object for the two references, because strings are immutable and so it is safe.
one.equals(two) - only checks the underlying values;
one == two - checks if both the physical objects are same.
This happens because JVM maintains a String Pool(implemented as a hashmap and lives in heap).
Integer i = 76;
String three = i.toString();
four = "76";
three != four. these are different. Although JVM can be optimized for String deduplication.

* To manually do the above use i.toString().intern().



** Chapter 10 Tuning JVM's Memory Settings
* -XX:+PrintStringTableStatistics -- to understand the sizew and density of string pool. Denser the string pool, slower the application runs.
* then number of buckets in string pool is always chosen to be a Prime number. Can be adjusted using -XX:StringTableSize. Tuning: StringTableSize
* Tuning heapSize:
-XX:+UnlockDiagnosticVMOptions provides details on heap size. MaxHeapSize and InitialHeapSize.
If heap size is small, for example to hold the StringPoolTable, the program crashes with the error OutOfMemoryError: Java heap space.
Generally, it happens because of memory leak issues. Lower it to see if your application is running efficiently.
If you already know that your application would need atleast x heapsize, it is advisable to set that as InitialHeapSize.
Shortcuts for these, -Xmx and -Xms. Example: -Xms1g (without equal sign).



** chapter 11 Garbage Collection
* Java is a managed language. JVM works out when objects are no longer needed. In earlier versions of non-managed languages, server restart would be required to free memory. This is called mamory leak.
* Any object on heap which cannot be reached is eligible for garbage collection. An object can be referenced from another unreachable objact in heap, but JVM should be intelligent enough to detect that. (Circular references). Any object that is unreachable from the stack or from Metaspace.
* We can suggest JVM to run gc on an object. System.gc()/ Runtime.getRuntime().gc().
* Due to an optimization in java11, running GC can actually return the unused memory from JVM's hold back to OS.
* Running gc by yourself is not a good idea, as GC may impact the processing of your application.
* When gc is run, finalize() method of that object is called. But this is deprecated since java9. This is because, finalize method does not guarantee, the code will be run as, for example, the application itself can finish before complete garbage collection of all objects happen. So putting resource.close() calls in finalize() method is never a good idea. Putting a never ending loop in the finalize method, or any hung state, can potentially stop the GC itself.



** Chapter 20 How lists work